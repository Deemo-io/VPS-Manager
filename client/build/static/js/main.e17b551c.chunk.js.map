{"version":3,"sources":["components/Server.js","components/Zone.js","components/pages/HomeScreen.js","settings.js","components/pages/AddZone.js","components/DnsRecord.js","components/pages/ZonePage.js","components/pages/ServerPage.js","components/pages/AddServer.js","components/pages/SshPage.js","App.js","serviceWorker.js","index.js"],"names":["Server","props","state","backgroundColor","statusColor","this","custom","info","status","power_status","server_state","className","style","cursor","onMouseOver","setState","onMouseOut","fontWeight","undefined","title","label","body","main_ip","float","width","height","React","Component","Zone","name","id","HomeScreen","refresh","Fragment","servers","map","server","key","SUBID","to","zones","zone","AddZone","domain","done","fetch","Settings","method","JSON","stringify","headers","then","res","json","console","log","catch","err","marginTop","onSubmit","e","preventDefault","addZone","placeholder","value","onChange","target","onClick","DnsRecord","record","zone_id","type","content","deleteRecord","bind","ZonePage","dns","match","params","zoneid","refreshDnsRecords","result","lineHeight","name_servers","url","i","addDnsRecord","delete","ServerPage","numFiles","uploadLoading","filesRef","createRef","uploadData","FormData","self","uploadIgnore","document","getElementById","append","files","length","response","reader","getReader","read","processStream","messages","TextDecoder","decode","textarea","scrollTop","scrollHeight","os","default_password","defaultValue","uploadApp","filesChange","ref","multiple","webkitdirectory","directory","display","click","marginBottom","margin","restartServer","AddServer","plans","oses","regions","selectedPlan","selectedOs","selectedRegion","keys","Object","push","VPSPLANID","OSID","DCID","getPlanList","getOsList","getRegionList","createServer","plan","price_per_month","region","SshPage","focus","serverid","padding","sendCommand","loading","App","socket","sshLoading","serversArray","getServers","getZones","io","on","data","parsedData","parse","message","error","finished","startIndex","indexOf","endIndex","slice","serverId","getServerFromUrl","window","location","href","emit","command","path","exact","render","componentDidMount","find","component","sendSshCommand","Boolean","hostname","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e17b551c.chunk.js","sourcesContent":["import React from 'react';\n\nclass Server extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      backgroundColor: '#FFF'\n    }\n  }\n\n  render() {\n    //for the status div, green if good, yellow if booting up or restarting\n    let statusColor = \"#EF3\";\n    if (!this.props.custom && this.props.info.status === 'active' &&\n        this.props.info.power_status === 'running' &&\n        this.props.info.server_state === \"ok\") statusColor = \"#3C3\";\n\n    return (\n      <div className=\"server-box\"\n      style={{backgroundColor: this.state.backgroundColor, cursor: 'pointer'}}\n      onMouseOver={() => this.setState({backgroundColor: 'rgba(0,0,0,0.2)'})}\n      onMouseOut={() => this.setState({backgroundColor: '#FFF'})}>\n\n        <h3 style={this.props.custom ? {fontWeight: 'normal'} : undefined}>\n          {this.props.custom ? this.props.title : this.props.info.label}\n        </h3>\n        <p>ip: <i>{this.props.custom ? this.props.body : this.props.info.main_ip}</i></p>\n\n        {this.props.custom ? null :\n          <div style={{float: 'right', backgroundColor: statusColor, width: '25px', height: '25px'}}></div> }\n      </div>\n    );\n  }\n}\n\nexport default Server;\n","import React from 'react';\n\nclass Zone extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      backgroundColor: '#FFF'\n    }\n  }\n\n  render() {\n    //for the status div, green if good, yellow if pending\n    let statusColor = \"#3C3\";\n    if (!this.props.custom && this.props.info.status !== 'active') statusColor = \"#EF3\";\n\n    return (\n      <div className=\"zone-box\"\n      style={{backgroundColor: this.state.backgroundColor, cursor: 'pointer'}}\n      onMouseOver={() => this.setState({backgroundColor: 'rgba(0,0,0,0.2)'})}\n      onMouseOut={() => this.setState({backgroundColor: '#FFF'})}>\n\n        <h3 style={this.props.custom ? {fontWeight: 'normal'} : undefined}>\n          {this.props.custom ? this.props.title : this.props.info.name}\n        </h3>\n        <p><i>{this.props.custom ? this.props.body : this.props.info.id}</i></p>\n\n        {this.props.custom ? null :\n          <div style={{float: 'right', backgroundColor: statusColor, width: '25px', height: '25px'}}></div> }\n      </div>\n    );\n  }\n}\n\nexport default Zone;\n","import React from 'react';\nimport Server from '../Server';\nimport Zone from '../Zone';\nimport { Link } from 'react-router-dom';\n\nclass HomeScreen extends React.Component {\n\n  componentDidMount() {\n    this.props.refresh();\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n\n        <h1>VPS Manager</h1>\n\n        <div id=\"servers\">\n          <h2>Servers</h2>\n          {this.props.servers.map(server => (\n            <Link key={server.SUBID} className=\"no-decoration\" to={\"/server/\"+server.SUBID}>\n              <Server info={server} />\n            </Link>\n          ))}\n\n          <div>\n            <Link className=\"no-decoration\" to=\"/addServer\">\n              <Server custom title=\"Add a server\" body=\"Choose server options\" />\n            </Link>\n          </div>\n        </div>\n\n        <div id=\"zones\">\n        <h2>Zones</h2>\n        {this.props.zones.map(zone => (\n          <Link key={zone.id} className=\"no-decoration\" to={\"/zone/\"+zone.id}>\n            <Zone info={zone} />\n          </Link>\n        ))}\n        <div>\n          <Link className=\"no-decoration\" to=\"/addZone\">\n            <Zone custom title=\"Add a zone\" body=\"Configure zone\" />\n          </Link>\n        </div>\n        </div>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default HomeScreen;\n","export default {\n  host: 'http://localhost:3000',\n  websocketHost: 'ws://localhost:3000'\n};\n","import React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport Settings from '../../settings';\n\nclass AddZone extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      domain: '',\n      done: false\n    }\n  }\n\n  addZone() {\n    fetch(Settings.host+'/createZone', {\n      method: 'POST',\n      body: JSON.stringify({\n        domain: this.state.domain\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(res => res.json())\n    .then(res => {\n      console.log(res);\n      this.setState({done: true});\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    if (this.state.done) return <Redirect to=\"/\" />\n\n    return (\n      <React.Fragment>\n        <h1>Add a Zone</h1>\n        <div className=\"content-box\">\n          <Link to=\"/\" className=\"button\">back</Link>\n          <form style={{marginTop: '10px'}} onSubmit={(e) => {e.preventDefault(); this.addZone()}}>\n            <input placeholder=\"Name\" value={this.state.domain}\n            onChange={(e) => this.setState({domain:e.target.value})} />\n\n            <button onClick={() => {}} className=\"button\">\n              Submit\n            </button>\n          </form>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AddZone;\n","import React from 'react';\n\nclass DnsRecord extends React.Component {\n  //deletes the dns record in cloudflare\n  deleteRecord() {\n    fetch('http://localhost:3000/zone/'+this.props.record.zone_id+\"/removedns/\"+this.props.record.id, {\n      method: 'POST'\n    })\n    .then(res => res.json())\n    .then(res => {\n      this.props.refresh();\n    })\n    .catch(err => {\n      console.log(err);\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"cell\">{this.props.record.type}</div>\n        <div className=\"cell\">{this.props.record.name}</div>\n        <div className=\"cell\">{this.props.record.content}</div>\n        <button onClick={this.deleteRecord.bind(this)} className=\"button\">Delete</button>\n      </div>\n    );\n  }\n}\n\nexport default DnsRecord;\n","import React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport DnsRecord from '../DnsRecord';\nimport Settings from '../../settings';\n\nclass ZonePage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dns: [],\n      done: false,\n      type: '',\n      name: '',\n      content: ''\n    }\n  }\n\n  //this deletes the whole zone\n  delete() {\n    fetch(Settings.host+'/zone/'+this.props.zone.id+'/deleteZone', {\n      method: 'POST'\n    })\n    .then(res => res.json())\n    .then(res => {\n      this.setState({ done: true });\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n  //this adds a dns record\n  addDnsRecord() {\n    fetch(Settings.host+'/zone/'+this.props.match.params.zoneid+'/adddns', {\n      method: 'POST',\n      body: JSON.stringify({\n        type: this.state.type,\n        name: this.state.name,\n        content: this.state.content\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(res => res.json())\n    .then(res => {\n      this.refreshDnsRecords();\n    })\n    .catch(err => {\n      console.log(err);\n    });\n\n    this.setState({type: '', name: '', content: ''});\n  }\n\n  refreshDnsRecords() {\n    fetch(Settings.host+'/zone/'+this.props.match.params.zoneid+'/getDns')\n    .then(res => res.json())\n    .then(res => {\n      this.setState({dns: res.result});\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n  componentDidMount() {\n    this.refreshDnsRecords();\n  }\n\n  render() {\n    if (this.state.done) return <Redirect to=\"/\" />\n    if (!this.props.zone) return <h1>Loading...</h1>;\n\n    return (\n      <React.Fragment>\n        <h1>View/Edit Zone \"{this.props.zone.name}\"</h1>\n        <div className=\"content-box\">\n          <Link to=\"/\" className=\"button\">back</Link>\n          <p>Status: {this.props.zone.status}</p>\n          <p style={{lineHeight: 0.2}}>Name servers:</p>\n          {this.props.zone.name_servers.map((url, i) => (\n            <p key={url} style={{lineHeight: 0.2}}>{url}</p>\n          ))}\n\n          <h2>DNS Records</h2>\n          {this.state.dns.map(record => <DnsRecord refresh={()=>this.refreshDnsRecords()} key={record.id} record={record} /> )}\n          <h3>Add Record</h3>\n          <form onSubmit={(e)=>{e.preventDefault();this.addDnsRecord()}}>\n            <input value={this.state.type}\n            onChange={(e)=>this.setState({type: e.target.value})} placeholder=\"Type\" />\n            <input value={this.state.name}\n            onChange={(e)=>this.setState({name: e.target.value})} placeholder=\"Name\" />\n            <input value={this.state.content}\n            onChange={(e)=>this.setState({content: e.target.value})} placeholder=\"Content\" />\n            <button type=\"submit\" className=\"button\">Submit</button>\n          </form>\n\n          <h2>Be careful - there's no going back</h2>\n          <button className=\"button red-back\" onClick={()=>this.delete()}>Delete Zone</button>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default ZonePage;\n","import React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport Settings from '../../settings';\n\nclass ServerPage extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      numFiles: 0,\n      done: false,\n      uploadLoading: false\n    }\n\n    this.filesRef = React.createRef();\n  }\n\n  //delete the server who's page we're on\n  delete() {\n    fetch(Settings.host+'/server/destroy', {\n      method: 'POST',\n      body: JSON.stringify({\n        SUBID: this.props.server.SUBID\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(res => res.json())\n    .then(res => {\n      this.setState({done: true});\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n  uploadApp() {\n    let uploadData = new FormData();\n    const self = this;//for use insode of the fetch callback function\n    this.setState({ uploadLoading: true });\n\n    //the uploadIgnore part\n    let uploadIgnore = document.getElementById('uploadignore').value;\n    uploadData.append('uploadignore', uploadIgnore);\n\n    //add files\n    for (let i = 0; i < this.filesRef.files.length; i++) {\n      uploadData.append(this.filesRef.files[i].name, this.filesRef.files[i]);\n    }\n\n    fetch(Settings.host+'/server/'+this.props.server.SUBID+'/uploadApp', {\n      method: 'POST',\n      body: uploadData\n    })\n    .then(response => response.body)\n    .then(body => {\n      const reader = body.getReader();\n      // console.log('got a readable stream');\n      //read from stream\n      reader.read().then(function processStream({ done, value }) {\n        // console.log('done:', done);\n        if (done) {\n          self.setState({ uploadLoading: false });\n          return;\n          // return console.log('stream is done');\n        }\n\n        //decode stream and console log the result\n        const messages = new TextDecoder(\"utf-8\").decode(value);\n        //console.log(messages[i]);\n        const textarea = document.getElementById('loadingText');\n        textarea.value += messages;\n        textarea.scrollTop = textarea.scrollHeight;\n        // console.log(messages);\n        return reader.read().then(processStream);\n      });\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n  filesChange(e) {\n    this.setState({numFiles: e.target.files.length});\n  }\n\n  restartServer() {\n    fetch(Settings.host+'/server/'+this.props.server.SUBID+'/restart', {\n      method: 'POST'\n    })\n    .then(res => {\n      this.setState({ done: true });\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    if (!this.props.server) return <h1>Loading...</h1>\n    if (this.state.done) return <Redirect to=\"/\" />\n\n    return (\n      <React.Fragment>\n        <h1>View/Edit Server \"{this.props.server.label}\"</h1>\n\n        <div className=\"content-box\">\n          <Link className=\"button\" to='/'>Back</Link>\n\n          <h2>Server Info</h2>\n          <p>IP address: {this.props.server.main_ip}</p>\n          <p>OS: {this.props.server.os}</p>\n          <p>Status: {this.props.server.status}</p>\n          <p>Default password: {this.props.server.default_password}</p>\n          <p>ID: {this.props.server.SUBID}</p>\n          <p>Server state: {this.props.server.server_state}</p>\n          <p>Power status: {this.props.server.power_status}</p>\n\n          <h2>Upload your project</h2>\n          <div>\n            {this.state.uploadLoading ?\n              <textarea id=\"loadingText\" defaultValue={\"Loading...\\n\"}></textarea>\n\n              :\n\n              <form onSubmit={(e) => {e.preventDefault();this.uploadApp()}}>\n                <input onChange={(e)=>this.filesChange(e)} ref={(ref) => this.filesRef = ref} type=\"file\" multiple webkitdirectory=\"true\" directory=\"true\" style={{display: 'none'}}/>\n                <button className=\"button\" onClick={(e) => {e.preventDefault();this.filesRef.click()}}>Upload Your project folder...</button>\n                <p>Selected files: {this.state.numFiles}</p>\n\n                <p style={{marginBottom: 0}}>Ignore these files/folders (similar to a .gitignore):</p>\n                <textarea placeholder=\"\" defaultValue={\"node_modules\\npackage-lock.json\\n.git\"} style={{display: 'block', margin: '10px 0'}} id=\"uploadignore\"></textarea>\n\n                <button className=\"button\" type=\"submit\">Submit</button>\n              </form>\n            }\n          </div>\n\n          <h2>Interact with server</h2>\n          <div>\n            <div style={{marginBottom: '10px'}}><Link to={\"/server/ssh/\"+this.props.server.SUBID} className=\"button\">Enter Terminal</Link></div>\n            <div><button className=\"button\" onClick={() => this.restartServer()}>Restart Server</button></div>\n          </div>\n\n          <h2>Be careful - there's no going back</h2>\n          <button onClick={() => this.delete()} className=\"button red-back\">Delete Server</button>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ServerPage;\n","import React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport Settings from '../../settings';\n\nclass AddServer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      plans: [],\n      oses: [],\n      regions: [],\n      selectedPlan: -1,\n      selectedOs: -1,\n      selectedRegion: -1,\n      label: '',\n      done: false\n    }\n  }\n\n  getPlanList() {\n    fetch(Settings.host+'/server/plans')\n    .then(res => res.json())\n    .then(res => {\n      //convert object to array\n      let keys = Object.keys(res);\n      let plans = [];\n      for (let i = 0; i < keys.length; i++) {\n        plans.push(res[keys[i]]);\n      }\n      this.setState({plans: plans, selectedPlan: plans[0].VPSPLANID});\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n  getOsList() {\n    fetch(Settings.host+'/server/oses')\n    .then(res => res.json())\n    .then(res => {\n      let keys = Object.keys(res);\n      let oses = [];\n      for (let i = 0; i < keys.length; i++) {\n        oses.push(res[keys[i]]);\n      }\n      this.setState({oses: oses, selectedOs: oses[0].OSID});\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n  getRegionList() {\n    fetch(Settings.host+'/server/regions')\n    .then(res => res.json())\n    .then(res => {\n      let keys = Object.keys(res);\n      let regions = [];\n      for (let i = 0; i < keys.length; i++) {\n        regions.push(res[keys[i]]);\n      }\n      this.setState({regions: regions, selectedRegion: regions[0].DCID});\n    })\n    .catch(err => {\n      console.log(err);\n    })\n  }\n\n  createServer() {\n    fetch(Settings.host+'/server/create', {\n      method: 'POST',\n      body: JSON.stringify({\n        VPSPLANID: this.state.selectedPlan,\n        OSID: this.state.selectedOs,\n        DCID: this.state.selectedRegion,\n        label: this.state.label\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(res => res.json())\n    .then(res => {\n      this.setState({done: true});\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n  componentDidMount() {\n    this.getPlanList();\n    this.getOsList();\n    this.getRegionList();\n  }\n\n  render() {\n    if (this.state.plans.length === 0 || this.state.oses.length === 0 || this.state.regions.length === 0) return <h1>Loading...</h1>\n    if (this.state.done) return <Redirect to=\"/\" />\n\n    return (\n      <React.Fragment>\n        <h1>Add a Server</h1>\n\n        <div className=\"content-box\">\n          <Link className=\"button\" to=\"/\">Back</Link>\n\n          <form style={{marginTop: '10px'}} onSubmit={(e) => {e.preventDefault();this.createServer()}}>\n            <select value={this.state.selectedPlan} onChange={(e)=>this.setState({selectedPlan: e.target.value})}>\n              {this.state.plans.map(plan => <option key={plan.VPSPLANID} value={plan.VPSPLANID}>{\"$\"+plan.price_per_month}</option>)}\n            </select>\n\n            <select value={this.state.selectedOs} onChange={(e)=>this.setState({selectedOs: e.target.value})}>\n              {this.state.oses.map(os => <option key={os.OSID} value={os.OSID}>{os.name}</option>)}\n            </select>\n\n            <select value={this.state.selectedRegion} onChange={(e)=>this.setState({selectedRegion: e.target.value})}>\n              {this.state.regions.map(region => <option key={region.DCID} value={region.DCID}>{region.name}</option>)}\n            </select>\n\n            <input placeholder=\"Server Label\" value={this.state.label} onChange={(e)=>this.setState({label: e.target.value})}/>\n\n            <button className=\"button\" type=\"submit\">Submit</button>\n          </form>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default AddServer;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass SshPage extends React.Component {\n  componentDidMount() {\n    document.getElementById('command').focus();\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <h1>Terminal Page</h1>\n\n        <div className=\"content-box\">\n          <Link to={\"/server/\"+this.props.match.params.serverid} className=\"button\">Back</Link>\n\n          <textarea id=\"output\" style={{width: '100%', height: '500px', margin: '10px 0', padding: '0'}}></textarea>\n\n          <form onSubmit={this.props.sendCommand}>\n            <input type=\"text\" id=\"command\" placeholder=\"Command...\" style={{width: '100%', margin: '0', padding: '0'}} />\n          </form>\n          <p style={this.props.loading ? null : {display: 'none'}}>Loading...</p>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SshPage;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport HomeScreen from './components/pages/HomeScreen';\nimport AddZone from './components/pages/AddZone';\nimport ZonePage from './components/pages/ZonePage';\nimport ServerPage from './components/pages/ServerPage';\nimport AddServer from './components/pages/AddServer';\nimport SshPage from './components/pages/SshPage';\nimport Settings from './settings';\nimport io from 'socket.io-client';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      servers: [],\n      zones: [],\n      socket: null,\n      sshLoading: false\n    }\n  }\n\n  //update cloudflare zones\n  getZones() {\n    fetch(Settings.host+'/zones')\n    .then(res => res.json())\n    .then(zones => {\n\n      this.setState({zones: zones.result});\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n  //updates the 'servers' state\n  getServers() {\n    fetch(Settings.host+'/servers')\n    .then(res => res.json())\n    .then(servers => {\n      //convert from object to array\n      const keys = Object.keys(servers);\n      const serversArray = [];\n      for (let i = 0; i < keys.length; i++) {\n        serversArray.push(servers[keys[i]]);\n      }\n      //put servers array in state\n      this.setState({servers: serversArray});\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n  componentDidMount() {\n    //get all servers in Vultr\n    this.getServers();\n    this.getZones();\n\n    //establish a socket.io connection\n    const socket = io(Settings.websocketHost);\n    this.setState({ socket: socket });\n\n    //listener for ssh responses\n    socket.on('sshResp', (data) => {\n      const parsedData = JSON.parse(data);\n      if (parsedData.message) {\n        if (parsedData.error) {\n          document.getElementById('output').value = \"ERROR: \" + parsedData.message;\n          return;\n        }\n\n        // document.getElementById('output').value += parsedData.message;\n        const textarea = document.getElementById('output');\n        textarea.value += parsedData.message;\n        textarea.scrollTop = textarea.scrollHeight;\n      }\n      else if (parsedData.finished) {\n        document.getElementById('output').value += \"\\n\";\n        // this.setState({ loading: false });\n        this.setState({ sshLoading: false });\n      }\n    });\n\n    //listener for upload responses\n    socket.on('uploadResp', (data) => {\n      // console.log()\n      const parsedData = JSON.parse(data);\n      if (parsedData.message) console.log(parsedData.message);\n    });\n  }\n\n  getServerFromUrl(url) {\n  \tlet startIndex = url.indexOf('/server/ssh/');\n  \tif (startIndex === -1) return null;\n\n  \tlet endIndex = url.indexOf('#');\n  \tif (endIndex === -1) endIndex = url.indexOf('?')\n  \tif (endIndex === -1) endIndex = url.length;\n\n  \treturn url.slice(startIndex+12,endIndex);\n  }\n\n  sendSshCommand(e) {\n    e.preventDefault();\n\n    //get server id, error checking and the like\n    const serverId = this.getServerFromUrl(window.location.href);\n    if (!this.state.socket) return;\n    if (!serverId) return;\n\n    //set loading to true and send the command\n    this.setState({ sshLoading: true });\n    this.state.socket.emit('ssh', JSON.stringify({\n      server: serverId,\n      command: document.getElementById('command').value\n    }));\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" exact render={(props) => <HomeScreen {...props}\n            refresh={this.componentDidMount.bind(this)}\n            servers={this.state.servers}\n            zones={this.state.zones} />} />\n\n          <Route path=\"/zone/:zoneid\" render={props => <ZonePage {...props}\n            zone={this.state.zones.find(zone => zone.id === props.match.params.zoneid)} />} />\n\n          <Route path=\"/addZone\" component={AddZone} />\n\n          <Route path=\"/server/ssh/:serverid\" render={props => <SshPage {...props}\n            server={this.state.servers.find(server => server.SUBID === props.match.params.serverid)}\n            loading={this.state.sshLoading}\n            sendCommand={this.sendSshCommand.bind(this)}/>} />\n\n          <Route path=\"/server/:serverid\" render={props => <ServerPage {...props}\n            loading={this.state.uploadLoading}\n            server={this.state.servers.find(server => server.SUBID === props.match.params.serverid)} />} />\n\n          <Route path=\"/addServer\" component={AddServer} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}